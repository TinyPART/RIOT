;
;  Copyright (C) 2024 Orange
;
; This file is subject to the terms and conditions of the GNU Lesser
; General Public License v2.1. See the file LICENSE in the top level
; directory for more details.

; CDDL specification for TinyContainer Metadata

; ========
; metadata
; ========

metadata-tag = #6.6082514239057121876(metadata) ; decimal(hex("tinyPART")) gives 6082514239057121876
metadata = {
    metadata-container => bstr .cbor container
    ? metadata-endpoints => bstr .cbor endpoints
    ? metadata-security => bstr .cbor security
}

metadata-container = 1
metadata-endpoints = 2
metadata-security  = 3

; =========
; container
; =========

container = {
    container-uid => bstr
    container-type => interpreter-types
    container-syscall-mask => bstr .cbor cwt
}

container-uid = 1
container-type = 2
container-syscall-mask = 3

interpreter-types /= interpreter-undefined
interpreter-types /= interpreter-native
interpreter-types /= interpreter-shell
interpreter-types /= interpreter-bpf
interpreter-types /= interpreter-wasm
interpreter-types /= interpreter-javacard-applet
interpreter-types /= interpreter-javascript
interpreter-types /= interpreter-python

; we don't know how to run the container code (e.g. before container building step)
interpreter-undefined = 0

; the container code shall be run as native code on the IoT device
interpreter-native = 1

; the container code is a list of commands in UTF-8 that can be run using IoT device shell
interpreter-shell = 2

; the container code shall be run as binary inside a virtual machine
interpreter-bpf = 3               ; virtual machine is BPF
interpreter-wasm = 4              ; virtual machine is WebAssembly
interpreter-javacard-applet = 5   ; virtual machine is Java Card

; the container code is a script to be run using an interpreter
interpreter-javascript = 6        ; interpreter is ECMAScript
interpreter-python = 7            ; interpreter is Python

; =========
; endpoints
; =========

endpoints = [ * endpoint ]
endpoint = {
    endpoint-id => uint
    peer-type => &peer-types
    ?peer-uid => bstr ; the peer-uid shall be set only for a container peer
    peer-endpoint-id => uint
    direction => &directions
    ? endpoint-token => bstr .cbor cwt
}

endpoint-id = 1
peer-type = 2
peer-types = ( peer-type-container: 0, peer-type-local: 1, peer-type-remote: 2 )
peer-uid = 3
peer-endpoint-id = 4
direction = 5
directions = ( in: 0, out: 1, both: 2)
endpoint-token = 6

; ========
; security
; ========

security = [
    start-max-duration: uint ; in ms
    loop-period: uint        ; in ms
    loop-max-duration: uint  ; in ms
    loop-max-lifetime: uint  ; in number of loop call
    stop-max-duration: uint  ; in ms
    data-token: bstr .cbor cwt
    code-token: bstr .cbor cwt
    metadata-token: bstr .cbor cwt
]

checksum = COSE_Mac / COSE_Sign
COSE_Mac = COSE_Mac_Tagged / COSE_Mac0_Tagged
COSE_Sign = COSE_Mac_Tagged / COSE_Mac0_Tagged

; ==================
; from RFC8392 - CWT
; ==================

cwt = cwt_tagged / COSE_messages
cwt_tagged = #6.61( COSE_Tagged_Message )

; ===================
; from RFC8152 - COSE
; ===================

COSE_Messages = COSE_Untagged_Message / COSE_Tagged_Message

COSE_Tagged_Message = COSE_Sign_Tagged / COSE_Sign1_Tagged /
    COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged /
    COSE_Mac_Tagged / COSE_Mac0_Tagged
COSE_Untagged_Message = COSE_Sign / COSE_Sign1 /
   COSE_Encrypt / COSE_Encrypt0 /
   COSE_Mac / COSE_Mac0

COSE_Mac0_Tagged = #6.17(COSE_Mac0)
COSE_Sign1_Tagged = #6.18(COSE_Sign1)
;Not yet supported:
;COSE_Mac_Tagged = #6.97(COSE_Mac)
;COSE_Sign_Tagged = #6.98(COSE_Sign)
;COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
;COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

COSE_MAC0 = [
    Headers,
    payload: bstr / nil,
    tag: bstr,
]
COSE_Sign1 = [
    Headers,
    payload: bstr / nil,
    signature : bstr
]

; headers isn't supported yet. Also we are using empty values.
Headers = (
    protected : bstr .size 0,
    unprotected : {}
)
